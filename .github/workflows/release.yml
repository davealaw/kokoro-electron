name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

# Required permissions for creating releases and uploading assets
permissions:
  contents: write # Required for creating releases and uploading assets
  actions: read # Required for downloading artifacts

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Pre-release Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: npm run test:coverage

      - name: Run code quality checks
        run: npm run code-quality

  build:
    name: Build & Release
    needs: test
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: windows-latest
            platform: win32
            arch: ia32
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: macos-14
            platform: darwin
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for Linux
        if: matrix.config.platform == 'linux'
        run: npm run build:linux

      - name: Build for Windows
        if: matrix.config.platform == 'win32'
        run: npm run build:win

      - name: Build for macOS
        if: matrix.config.platform == 'darwin'
        run: npm run build:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false # Disable code signing for now

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.config.platform }}-${{ matrix.config.arch }}
          path: dist/
          retention-days: 90

  release:
    name: Create GitHub Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: ./release-assets

      - name: Organize release assets
        run: |
          mkdir -p ./final-assets
          find ./release-assets -name "*.dmg" -exec cp {} ./final-assets/ \;
          find ./release-assets -name "*.zip" -exec cp {} ./final-assets/ \;
          find ./release-assets -name "*.exe" -exec cp {} ./final-assets/ \;
          find ./release-assets -name "*.AppImage" -exec cp {} ./final-assets/ \;
          find ./release-assets -name "*.deb" -exec cp {} ./final-assets/ \;
          ls -la ./final-assets/

      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_NUM="${VERSION#v}"

          # Extract changelog section for this version
          if grep -q "## \[${VERSION_NUM}\]" CHANGELOG.md; then
            sed -n "/## \[${VERSION_NUM}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release-notes.md
          else
            echo "See [CHANGELOG.md](CHANGELOG.md) for details." > release-notes.md
          fi

          echo "Release notes:"
          cat release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Kokoro TTS GUI ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: ./final-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
